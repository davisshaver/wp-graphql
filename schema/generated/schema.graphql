# An object.
type Audio implements MediaInterface {
  id: Int
  date: String
  date_gmt: String
  guid: Guid
  modified: String
  modified_gmt: String
  slug: String
  type: String
  link: String
  title: Title
  comment_status: COMMENT_STATUS
  ping_status: PING_STATUS
  template: String
  meta: [Meta]
  author: User
  _links: MediaLinks
  description: Description
  caption: Caption
  alt_text: String
  media_type: String
  mime_type: String
  post: Int
  source_url: String
  media_details: AudioDetails
}

# The details for the media.
type AudioDetails {
  title: String
}

# Avatar info.
type Avatar {
  size: Int
  url: String
}

# The caption for the media.
type Caption {
  rendered: String
}

# A unique identifier for a post.
type Category implements TermInterface {
  id: Int
  count: Int
  description: String
  link: String
  name: String
  slug: String
  taxonomy: String
  meta: [Meta]
  _links: CategoryLinks
  parent: Category
}

# The links for a post.
type CategoryLinks {
  self: [Link]
  collection: [Link]
  about: [Link]
  up: [EmbeddableLink]
  post_type: [TermLink]
  curies: [TemplatedLink]
}

# An object.
type Comment {
  id: Int
  post: Post
  parent: Comment
  author: User
  author_name: String
  author_url: String
  date: String
  date_gmt: String
  content: Content
  link: String
  status: String
  type: String
  author_avatar_urls: [Avatar]
  meta: [Meta]
  _links: CommentLinks
}

enum COMMENT_ORDERBY {
  ID
  INCLUDE
  DATE
  DATE_GMT
  POST
  PARENT
  TYPE
}

enum COMMENT_STATUS {
  OPEN
  CLOSED
}

# The links for a comment.
type CommentLinks {
  self: [Link]
  collection: [Link]
  author: [EmbeddableLink]
  up: [PostTypeLink]
}

# The content for a post.
type Content {
  rendered: String
  protected: Boolean
}

# The description for the media.
type Description {
  rendered: String
}

# An embeddable link for an entity.
type EmbeddableLink {
  href: String
  embeddable: Boolean
}

# The excerpt for a post.
type Excerpt {
  rendered: String
  protected: Boolean
}

enum FORMAT {
  STANDARD
  ASIDE
  CHAT
  GALLERY
  LINK
  IMAGE
  QUOTE
  STATUS
  VIDEO
  AUDIO
}

# A unique identifier for a post.
type Guid {
  rendered: String
}

# An object.
type Image implements MediaInterface {
  id: Int
  date: String
  date_gmt: String
  guid: Guid
  modified: String
  modified_gmt: String
  slug: String
  type: String
  link: String
  title: Title
  comment_status: COMMENT_STATUS
  ping_status: PING_STATUS
  template: String
  meta: [Meta]
  author: User
  _links: MediaLinks
  description: Description
  caption: Caption
  alt_text: String
  media_type: String
  mime_type: String
  post: Int
  source_url: String
  media_details: ImageDetails
}

# The details for the media.
type ImageDetails {
  width: Int
  height: Int
  file: String
  sizes: [MediaSize]
}

# A link for a post.
type Link {
  href: String
}

union Media = Image | Audio | Video

enum MEDIA_TYPE {
  IMAGE
  VIDEO
  AUDIO
  APPLICATION
}

interface MediaInterface {
  id: Int
  date: String
  date_gmt: String
  guid: Guid
  modified: String
  modified_gmt: String
  slug: String
  type: String
  link: String
  title: Title
  comment_status: COMMENT_STATUS
  ping_status: PING_STATUS
  template: String
  meta: [Meta]
  author: User
  _links: MediaLinks
  description: Description
  caption: Caption
  alt_text: String
  media_type: String
  mime_type: String
  post: Int
  source_url: String
}

# The links for the media.
type MediaLinks {
  self: [Link]
  collection: [Link]
  about: [Link]
  author: [EmbeddableLink]
  replies: [EmbeddableLink]
}

# The details for the media size.
type MediaSize {
  name: String
  width: Int
  height: Int
  file: String
  mime_type: String
  source_url: String
}

# The metadata for a post.
type Meta {
  key: String
  value: String
}

enum ORDER {
  ASC
  DESC
}

# An object.
type Page implements PostInterface {
  id: Int
  date: String
  date_gmt: String
  guid: Guid
  modified: String
  modified_gmt: String
  slug: String
  type: String
  link: String
  title: Title
  content: Content
  excerpt: Excerpt
  comment_status: COMMENT_STATUS
  ping_status: PING_STATUS
  template: String
  meta: [Meta]
  author: User
  featured_media: Media
  _links: PageLinks
  parent: Page
  menu_order: Int
}

enum PAGE_ORDERBY {
  DATE
  RELEVANCE
  ID
  INCLUDE
  TITLE
  SLUG
  MENU_ORDER
}

# The links for a page.
type PageLinks {
  self: [Link]
  collection: [Link]
  about: [Link]
  author: [EmbeddableLink]
  replies: [EmbeddableLink]
  history: [Link]
  attachment: [Link]
  term: [TermLink]
  curies: [TemplatedLink]
  up: [EmbeddableLink]
}

enum PING_STATUS {
  OPEN
  CLOSED
}

# A read-only post object.
type Post implements PostInterface {
  id: Int
  date: String
  date_gmt: String
  guid: Guid
  modified: String
  modified_gmt: String
  slug: String
  type: String
  link: String
  title: Title
  content: Content
  excerpt: Excerpt
  comment_status: COMMENT_STATUS
  ping_status: PING_STATUS
  template: String
  format: FORMAT
  meta: [Meta]
  author: User
  featured_media: Media
  _links: PostLinks
  sticky: Boolean
  categories: [Category]
  tags: [Tag]
}

enum POST_ORDERBY {
  DATE
  RELEVANCE
  ID
  INCLUDE
  TITLE
  SLUG
}

interface PostInterface {
  id: Int
  date: String
  date_gmt: String
  guid: Guid
  modified: String
  modified_gmt: String
  slug: String
  type: String
  link: String
  title: Title
  content: Content
  excerpt: Excerpt
  comment_status: COMMENT_STATUS
  ping_status: PING_STATUS
  template: String
  meta: [Meta]
  author: User
  featured_media: Media
}

# The links for a post.
type PostLinks {
  self: [Link]
  collection: [Link]
  about: [Link]
  author: [EmbeddableLink]
  replies: [EmbeddableLink]
  history: [Link]
  attachment: [Link]
  term: [TermLink]
  curies: [TemplatedLink]
}

# An embeddable link for an entity.
type PostTypeLink {
  href: String
  embeddable: Boolean
  post_type: String
}

type Query {
  posts(page: Int, per_page: Int, offset: Int, order: ORDER, search: String, include: String, exclude: String, after: String, before: String, author: String, author_exclude: String, slug: String, orderby: POST_ORDERBY, sticky: Boolean, categories: String, categories_exclude: String, tags: String, tags_exclude: String): [Post]
  post(id: Int): Post
  users(page: Int, per_page: Int, offset: Int, order: ORDER, search: String, include: String, exclude: String, slug: String, orderby: USER_ORDERBY, roles: String): [User]
  user(id: Int): User
  categories(page: Int, per_page: Int, offset: Int, order: ORDER, search: String, include: String, exclude: String, slug: String, orderby: TAXONOMY_ORDERBY, hide_empty: Boolean, post: Int, parent: Int): [Category]
  category(id: Int): Category
  tags(page: Int, per_page: Int, offset: Int, order: ORDER, search: String, include: String, exclude: String, slug: String, orderby: TAXONOMY_ORDERBY, hide_empty: Boolean, post: Int): [Tag]
  tag(id: Int): Tag
  pages(page: Int, per_page: Int, offset: Int, order: ORDER, search: String, include: String, exclude: String, after: String, before: String, parent: String, parent_exclude: String, author: String, author_exclude: String, slug: String, menu_order: Int, orderby: PAGE_ORDERBY): [Page]
  page(id: Int): Page
  comments(page: Int, per_page: Int, offset: Int, order: ORDER, search: String, include: String, exclude: String, after: String, before: String, parent: String, parent_exclude: String, post: Int, orderby: COMMENT_ORDERBY): [Comment]
  comment(id: Int): Comment
  types: [Type]
  type(type: String): Type
  taxonomies(type: String): [Taxonomy]
  taxonomy(type: String): Taxonomy
  media(page: Int, per_page: Int, offset: Int, order: ORDER, search: String, include: String, exclude: String, after: String, before: String, parent: String, parent_exclude: String, author: String, author_exclude: String, slug: String, orderby: POST_ORDERBY, media_type: MEDIA_TYPE, mime_type: String): [Media]
  medium(id: Int): Media
  statuses: [Status]
  status(type: String): Status
}

# A post status.
type Status {
  name: String
  type: String
  public: Boolean
  queryable: Boolean
  slug: String
  _links: StatusLinks
}

# The links for a status.
type StatusLinks {
  archives: [Link]
}

# A unique identifier for a post.
type Tag implements TermInterface {
  id: Int
  count: Int
  description: String
  link: String
  name: String
  slug: String
  taxonomy: String
  meta: [Meta]
  _links: TagLinks
}

# The links for a post.
type TagLinks {
  self: [Link]
  collection: [Link]
  about: [Link]
  post_type: [TermLink]
  curies: [TemplatedLink]
}

# A taxonomy type.
type Taxonomy {
  type: String
  name: String
  slug: String
  description: String
  types: [String]
  hierarchical: Boolean
  rest_base: String
  _links: TaxonomyLinks
}

enum TAXONOMY_ORDERBY {
  ID
  INCLUDE
  NAME
  SLUG
  TERM_GROUP
  DESCRIPTION
  COUNT
}

# The links for a taxonomy.
type TaxonomyLinks {
  collection: [Link]
  items: [Link]
  curies: [TemplatedLink]
}

type TemplatedLink {
  name: String
  href: String
  templated: Boolean
}

# Term fields.
interface TermInterface {
  id: Int
  count: Int
  description: String
  link: String
  name: String
  slug: String
  taxonomy: String
  meta: [Meta]
}

type TermLink {
  taxonomy: String
  href: String
  embeddable: Boolean
}

# The title for a post.
type Title {
  rendered: String
}

# A post type.
type Type {
  type: String
  description: String
  hierarchical: Boolean
  name: String
  slug: String
  taxonomies: [String]
  rest_base: String
  _links: TypeLinks
}

# The links for a type.
type TypeLinks {
  collection: [Link]
  items: [Link]
  curies: [TemplatedLink]
}

# An object.
type User {
  id: Int
  name: String
  description: String
  link: String
  slug: String
  avatar_urls: [Avatar]
  _links: UserLinks
}

enum USER_ORDERBY {
  ID
  INCLUDE
  NAME
  REGISTERED_DATE
  SLUG
  EMAIL
  URL
}

# The links for a user.
type UserLinks {
  self: [Link]
  collection: [Link]
}

# An object.
type Video implements MediaInterface {
  id: Int
  date: String
  date_gmt: String
  guid: Guid
  modified: String
  modified_gmt: String
  slug: String
  type: String
  link: String
  title: Title
  comment_status: COMMENT_STATUS
  ping_status: PING_STATUS
  template: String
  meta: [Meta]
  author: User
  _links: MediaLinks
  description: Description
  caption: Caption
  alt_text: String
  media_type: String
  mime_type: String
  post: Int
  source_url: String
  media_details: VideoDetails
}

# The details for the media.
type VideoDetails {
  title: String
}
